% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{PlotTSNE}
\alias{PlotTSNE}
\title{Creates tsne plot}
\usage{
PlotTSNE(object, data.use, labels.use, cols = NULL, title = "",
  legend = "none", seed = 1234, ...)
}
\arguments{
\item{object}{scAlign class object with aligned data}

\item{data.use}{Specifies which alignment results to use.}

\item{labels.use}{Specifies "dataset" or "celltype" labeling from object meta.data.}

\item{cols}{Colours for plot}

\item{title}{ggplot title}

\item{legend}{Determines if legend should be drawn}

\item{seed}{Random seed for reproducability}

\item{...}{Additional arguments to Rtsne function}

\item{labels}{Object labels}
}
\value{
ggplot2 object
}
\description{
Creates tsne plot
}
\examples{

library(Seurat)

## Input data, 1000 genes x 100 cells
data = matrix(sample.int(10000, 1000*100, TRUE), 1000, 100)
rownames(data) = paste0("gene", seq_len(1000))
colnames(data) = paste0("cell", seq_len(100))

age    = c(rep("young",50), rep("old",50))
labels = c(c(rep("type1",25), rep("type2",25)), c(rep("type1",25), rep("type2",25)))

ctrl.data = data[,which(age == "young")]
stim.data = data[,which(age == "old")]

ctrl = CreateSeuratObject(raw.data = ctrl.data, project = "MOUSE_AGE", min.cells = 0)
ctrl@meta.data$stim  = "YOUNG"
ctrl@meta.data$label = labels[which(age == "young")]
ctrl = ScaleData(ctrl, do.scale=FALSE, do.center=FALSE, scale.max=50, display.progress = TRUE)

stim = CreateSeuratObject(raw.data = stim.data, project = "MOUSE_AGE", min.cells = 0)
stim@meta.data$stim = "OLD"
stim@meta.data$label = labels[which(age == "old")]
stim = ScaleData(stim, do.scale=FALSE, do.center=FALSE, scale.max=50, display.progress = TRUE)

## Build the scAlign class object and compute PCs
scAlignHSC = scAlignCreateObject(objects = list("YOUNG"=ctrl, "OLD"=stim),
                                 labels = list(ctrl@meta.data$label, stim@meta.data$label),
                                 pca.reduce = FALSE,
                                 pcs.compute = 50,
                                 cca.reduce = FALSE,
                                 ccs.compute = 15,
                                 project.name = "scAlign_example")

## Run scAlign with high_var_genes
scAlignHSC = scAlign(scAlignHSC,
                     options=scAlignOptions(steps=1, log.every=1, early.stop=FALSE, architecture="large"),
                     encoder.data="scale.data",
                     supervised='none',
                     run.encoder=TRUE,
                     run.decoder=FALSE,
                     log.results=FALSE,
                     device="CPU")

## Plot alignment for 3 input types
example_plot = PlotTSNE(scAlignHSC, "GENE", "labels", title="scAlign-Gene", perplexity=30)

}
